#!/bin/bash

#************************************************************************
# QBAS
# version 0.9
# Copyright (c) 2003-2004 Gianluca Romanin ( J_Zar )
#        <jayorama@users.sourceforge.net>
#************************************************************************

#************************************************************************
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#************************************************************************



# inserting blanks...
echo
echo "-------------------------------------------"

######################### Main stage
#
if   test "$1" = "--help" || test "$1" = "-h"  || test "$1" = "--h";
then
	cat help ;
	exit
fi

# We should locate a project file:
# if not defined in build.definition
# we'll retrieve by yourself.
# If more than one then, we take only the first.
PROJECT_FILE=$(cat build.definition | grep "PROJECT_FILE" -0 -w | cut -f2 -d"=" ) ;
if [ "$PROJECT_FILE" = "" ] ;
then 
	ls *.pro 2> proj_temp 1> /dev/null ;
	if cat proj_temp  | grep "No such file" -q ;	
	then
		rm -f proj_temp ;
		echo "Can't locate a project file!" ;
		exit 
	else
		ls --format=commas *.pro 1> proj_temp ;
		PROJECT_FILE=$(cat proj_temp | cut -f1 -d",") ;
		rm -f proj_temp ;
	fi
fi

echo "Project file is:      $PROJECT_FILE"

# cleanup phase
rm -f configure.def ;

# number of arguments + 1
NUM_OPT=$(($# + 1));

# parsing arguments
for (( d=1; d<$NUM_OPT; d++ )); do

	# retrieve the field $d
	ARG=$(echo $@ | cut -f$d -d" ") ;
	# retrieve the option
	OPT=$(echo $ARG | cut -f1 -d"=") ;
	# retrieve the value
	VAL=$(echo $ARG | cut -f2- -d"=") ;

	if [ "$OPT" = "--cflags" ];
	then
		T=""
		for (( y=1; y<128; y++ )); do
			# parse option value to find different subvalues
			V=$(echo $VAL | cut -f$y -d";") ;
			# checking to avoid duplicates or if we have finished
			if [ "$V" = "" ] || [ "$V" = "$T" ] ;
			then
				break
			fi
			T=$V ;
			echo "QMAKE_CFLAGS += $V" >> configure.def
		done
	fi

	if [ "$OPT" = "--cxxflags" ];
	then
		T=""
		for (( y=1; y<128; y++ )); do
			# parse option value to find different subvalues
			V=$(echo $VAL | cut -f$y -d";") ;
			# checking to avoid duplicates or if we have finished
			if [ "$V" = "" ] || [ "$V" = "$T" ] ;
			then
				break
			fi
			T=$V ;
			echo "QMAKE_CXXFLAGS += $V" >> configure.def
		done
	fi

	if [ "$OPT" = "--lflags" ];
	then
		T=""
		for (( y=1; y<128; y++ )); do
			# parse option value to find different subvalues
			V=$(echo $VAL | cut -f$y -d";") ;
			# checking to avoid duplicates or if we have finished
			if [ "$V" = "" ] || [ "$V" = "$T" ] ;
			then
				break
			fi
			T=$V ;
			echo "QMAKE_LFLAGS += $V" >> configure.def
		done
	fi

	if [ "$OPT" = "--includedir" ];
	then
		T=""
		for (( y=1; y<6; y++ )); do
			# parse option value to find different subvalues
			V=$(echo $VAL | cut -f$y -d";") ;
			# checking to avoid duplicates or if we have finished
			if [ "$V" = "" ] || [ "$V" = "$T" ] ;
			then
				break
			fi
			T=$V ;
			echo "PATH$y = $V" >> configure.def
		done
	fi


	if [ "$OPT" = "--prefix" ];
	then
		echo "PREFIX = $VAL" >> configure.def
	fi

	if [ "$OPT" = "--static-linking-path" ];
	then
		echo "STATIC_LIBPATH = $VAL" >> configure.def
	fi

	if [ "$OPT" = "--enable-debug" ];
	then
		echo "CONFIG += debug" >> configure.def
	fi

	if [ "$OPT" = "--includelib" ];
	then
		T=""
		for (( y=1; y<6; y++ )); do
			# parse option value to find different subvalues
			V=$(echo $VAL | cut -f$y -d";") ;
			# checking to avoid duplicates or if we have finished
			if [ "$V" = "" ] || [ "$V" = "$T" ] ;
			then
				break
			fi
			T=$V ;
			echo "LIBS += $V" >> configure.def
		done
	fi
done




######################### QT Env variables checking
#
if  export | grep "$QTDIR" -q ;
then
	RES="yes"
else
	RES="no"
fi

echo Checking whether QTDIR is set     ........    $RES   , $QTDIR

if echo $RES | grep "no" -q ;
then
	echo
	echo "__ QTDIR must be properly set."
	echo "__ Please see at http://www.trolltech.com, section developers"
	echo "__ and find the installation instructions."
	exit
fi


######################### Qt headers ---> qglobal.h
#
if test -f $QTDIR/include/qglobal.h ;
then
	RES="yes"
else
	RES="no"
fi

echo Checking for Qt headers    ........    $RES

if test "$RES" = "no" ;
then
	echo
	echo "__ I can't locate Qt headers. Just tried: $QTDIR/include"
	echo "__ If your headers are located in another path, please send a"
	echo "__ bug report to the QBAS developers ( http://qbas.berlios.de )."
	exit
fi


######################### QT Version >= $QT_MINIMUM_REQUIRED_VERSION (if it is set)
#

QT_MINIMUM_REQUIRED_VERSION=$(cat build.definition | grep "QT_MINIMUM_REQUIRED_VERSION" -0 -w | cut -f2 -d"=" ) ;
QT_MINIMUM_REQUIRED_VERSION_STR=$(cat build.definition | grep "QT_MINIMUM_REQUIRED_VERSION_STR" -0 -w | cut -f2 -d"=" ) ;

if [ "$QT_MINIMUM_REQUIRED_VERSION" != "" ] && [ "$QT_MINIMUM_REQUIRED_VERSION_STR" != "" ];
then
	cat $QTDIR/include/qglobal.h | grep "QT_VERSION" -0 > temp ; 
	QVERSION=$(cat temp | grep "#define QT_VERSION" -0 -w | cut -f3 -d" " | cut -f2 -d"x") ;
	QVERSION_STR=$(cat temp | grep "QT_VERSION_STR" -0 -w | cut -f2 -d'"') ;

	if test $QVERSION -ge $QT_MINIMUM_REQUIRED_VERSION  ;
	then 
		RES="yes"
	else
		RES="no"
	fi

	rm -f temp ;

	echo Checking if Qt \>\= $QT_MINIMUM_REQUIRED_VERSION_STR    ........    $RES   , $QVERSION_STR

	if echo $RES | grep "no" -q ;
	then
		echo
		echo "__ Incorrect Qt version!"
		exit
	fi
fi


######################### qmake, uic, moc checking
#
if test -e $QTDIR/bin/qmake ;
then
	RES="yes"
else
	RES="no"
fi

echo Checking for qmake    ........    $RES

if test "$RES" = "no" ;
then
	echo
	echo "__ I can't locate qmake. Just tried: $QTDIR/bin/qmake"
	exit
fi

if test -e $QTDIR/bin/uic ;
then
	RES="yes"
else
	RES="no"
fi

echo Checking for uic    ........    $RES

if test "$RES" = "no" ;
then
	echo
	echo "__ I can't locate uic. Just tried: $QTDIR/bin/uic"
	exit
fi

if test -e $QTDIR/bin/moc ;
then
	RES="yes"
else
	RES="no"
fi

echo Checking for moc    ........    $RES

if test "$RES" = "no" ;
then
	echo
	echo "__ I can't locate moc. Just tried: $QTDIR/bin/moc"
	exit
fi





echo "-------------------------------------------"
echo    Now going with qmake...
echo "-------------------------------------------"

$QTDIR/bin/qmake $PROJECT_FILE

