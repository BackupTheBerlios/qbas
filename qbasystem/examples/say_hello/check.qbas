
#************************************************************************
# QBASystem
# version 0.9.7
# Copyright (c) 2003-2004 Gianluca Romanin ( J_Zar )
#        <j_zar_AT_users.berlios.de>
#************************************************************************


#************************************************************************
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#************************************************************************




# --------------------------- Init     ------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
FOUND = false
# by default we suppose not to have features and DO_ACTIONS
# is always true...
DO_ACTIONS = true
# Init the package path to null value... (used if --with-PACKAGE is set by configure)
PACKAGE_PATH =
# Variable for internal use: take trace of linking type.
LINK_TYPE = standard
# --------------------------------------
# Generic init step (only once)... 
# --------------------------------------
contains( INIT, true ) {
	# init the summary output...
	contains( PROJECT_SETTINGS , enable_summary ) {
		system( echo " " >> $$SUMMARY_LOG )
		system( echo "	---------- Features Summary ----------" >> $$SUMMARY_LOG )
		system( echo " " >> $$SUMMARY_LOG )
		}
	# init config.h if required...
	# We allow a prototype called 'config.h.in' to be then
	# modified by our code.
	contains( PROJECT_SETTINGS , enable_config_h ) {
		DEFINES += HAVE_CONFIG_H
		exists( config.h.in ) {
			!system( cp -f config.h.in config.h ) {
				error( "Internal error renaming config.h!" )
				}
			}
		system( echo " " >> config.h )
		system( echo "/** This file is automatically created by QBASystem" >> config.h )
		system( echo " *  Pay attention: changes are unsafe!" >> config.h )
		system( echo " */" >> config.h )
		system( echo " " >> config.h )
		system( echo "$${DEF_CHAR}define	LINUX	1" >> config.h )
		system( echo " " >> config.h )
		}
	# init all template messages...
	# warning for static linking
	!isEmpty( STATIC_TEMPLATE_MESSAGE ) {
		STATIC_MESSAGE = "$${STATIC_TEMPLATE_MESSAGE}"
		}
		else {
		STATIC_MESSAGE = , statically linked
		}
	# warning for skipped link
	!isEmpty( SKIP_LINK_TEMPLATE_MESSAGE ) {
		SKIP_LINK_MESSAGE = "$${SKIP_LINK_TEMPLATE_MESSAGE}"
		}
		else {
		SKIP_LINK_MESSAGE = , skipped
		}
	!isEmpty( USER_DEFINED_PATH_TEMPLATE_MESSAGE ) {
		USER_DEFINED_MESSAGE = "$${USER_DEFINED_PATH_TEMPLATE_MESSAGE}"
		}
		else {
		USER_DEFINED_PATH_MESSAGE =   (user defined)
		}
	# all done: no more through this step!
	INIT = false
	}
# --------------------------------------
# At first: check for errors in definition... 
# --------------------------------------
isEmpty( OBJECT ) {
	message( "Error in the build.definition file." )
	message( "Please, contact the author of this package and send" )
	message( "him a bug message." )
	error( "Exit with failure at OBJECT definition..." )
	}
isEmpty( TYPE ) {
	message( "Error in the build.definition file." )
	message( "Please, contact the author of this package and send" )
	message( "him a bug message." )
	error( "Exit with failure at TYPE definition..." )
	}
# --------------------------------------
# if DESCRIPTION is not empty we use it to set the output message... 
# --------------------------------------
!isEmpty( DESCRIPTION ) {
	contains ( TYPE, option ) {
		MESSAGE = Option for $${DESCRIPTION} ...............
		} else {
			MESSAGE = Checking for $${DESCRIPTION} ...............
			}
	}
	else {
	contains ( TYPE, option ) {
		MESSAGE = Option for $${OBJECT} ...............
		} else {
			MESSAGE = Checking for $${OBJECT} ...............
			}
	}
# --------------------------------------
# if ERROR_TEMPLATE_MESSAGE is not empty we use it to set the 
# error output message... 
# --------------------------------------
!isEmpty( ERROR_TEMPLATE_MESSAGE ) {
	ERROR_MESSAGE = "$${ERROR_TEMPLATE_MESSAGE} $${OBJECT}"
	}
	else {
	ERROR_MESSAGE = "Cannot compile without $${OBJECT}!"
	}
# --------------------------------------
# if FEATURE is set we check if it is enabled... 
# --------------------------------------
!isEmpty( FEATURE ) {
	contains( OPTIONS, lock_feature ) {
		# if feature is locked by the developer
		# then we skip user directives...
		contains( OPTIONS, disable_feature ) {
			# we avoid to link libraries if disabled
			# Finally there is no reason to exit on failure
			OPTIONS += skip_link
			OPTIONS -= exit_on_failure
			DO_ACTIONS = false
			}
		# by default FEATURE is >>> ENABLED <<< !
		} else {
		# this is the user time: if he disabled the feature
		# we set the environment on conseguence...
		contains( DISABLED_FEATURES, $${FEATURE} ) {
			# we avoid to link libraries if disabled
			# Finally there is no reason to exit on failure
			OPTIONS += skip_link
			OPTIONS -= exit_on_failure
			DO_ACTIONS = false
		}
		# this is the user time: if he enabled the feature
		# we set the environment on conseguence...
		# Although code is provided for convenience...
		contains( ENABLED_FEATURES, $${FEATURE} ) {
			DO_ACTIONS = true
		} else {
			# if nothing is set, looking at developer's will...
			contains( OPTIONS, disable_feature ) {
				# we avoid to link libraries if disabled
				# Finally there is no reason to exit on failure
				OPTIONS += skip_link
				OPTIONS -= exit_on_failure
				DO_ACTIONS = false
			}
		}
		}
	}
# --------------------------------------
# if PACKAGE is set we act properly... 
# --------------------------------------
!isEmpty( PACKAGE ) {
	contains( USER_DEFINED_PACKAGES, $${PACKAGE} ) {
		TMP = $$system( cat configure.def | grep "$${PACKAGE}_PATH" )
		PACKAGE_PATH = $$system( echo $${TMP} | cut -f2  -d"=" )
		LINK_TYPE = user_defined
		} 
	}



# --------------------------- lib type ------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# checking with defaults
contains( TYPE, lib ) {

# if we have a library
IS_LIB = true

# --------------------------- PACKAGE path is user defined ----------------
!isEmpty( PACKAGE_PATH ) {
	exists( $${PACKAGE_PATH}/$${OBJECT} ) {
		!contains( OPTIONS, skip_link ) {
			LIBS += $${PACKAGE_PATH}/$${OBJECT}
			}
		FOUND = true
		}
} else { 

	# --------------------------- marked static -------------------------------
	contains( FOUND, false) {
	# static linking for package
	contains( OPTIONS, marked_static ) {
		!isEmpty( STATIC_LIBPATH ) {
			exists( $${STATIC_LIBPATH}/$${OBJECT} ) {
				!contains( OPTIONS, skip_link ) {
					LIBS += $${STATIC_LIBPATH}/$${OBJECT}
					LINK_TYPE = static
					}
				FOUND = true
				} else {
					exists( $${LIB_BASE0}/$${OBJECT} ) {
						!contains( OPTIONS, skip_link ) {
							LIBS += $${LIB_BASE0}/$${OBJECT}
							LINK_TYPE = static
							} 
						FOUND = true
						} else {
							exists( $${LIB_BASE1}/$${OBJECT} ) {
								!contains( OPTIONS, skip_link ) {
									LIBS += $${LIB_BASE1}/$${OBJECT}
									LINK_TYPE = static
									} 
								FOUND = true
								} else {
									exists( $${LIB_BASE2}/$${OBJECT} ) {
										!contains( OPTIONS, skip_link ) {
											LIBS += $${LIB_BASE2}/$${OBJECT}
											LINK_TYPE = static
											} 
										FOUND = true
										} else {
											FOUND = static_failure
											}
									}
							}
					}
			}	
		}
		}
	
	# --------------------------- lib 'ld' check ------------------------------
	contains( FOUND, false) {
		# --------------------------------------
		# STANDARD LIB CHECK
		# At first ----> check using LD
		# --------------------------------------
		!isEmpty( LINK_LIBS ) {
			system( ld $${LINK_LIBS} 2>/dev/null ) {
				FOUND = true
				LINK_TYPE = shared
				}
		}
		
		# --------------------------- lib existance check -------------------------
		# If this fails ----> check the file existence
		contains( FOUND, false) {
			exists( $${LIB_BASE0}/$${OBJECT} ) {
				!contains( OPTIONS, skip_link ) {
					LIBS += $${LIB_BASE0}/$${OBJECT}
					LINK_TYPE = static
					} 
				FOUND = true
				} else {
					exists( $${LIB_BASE1}/$${OBJECT} ) {
						!contains( OPTIONS, skip_link ) {
							LIBS += $${LIB_BASE1}/$${OBJECT}
							LINK_TYPE = static
							} 
						FOUND = true
						} else {
							exists( $${LIB_BASE2}/$${OBJECT} ) {
								!contains( OPTIONS, skip_link ) {
									LIBS += $${LIB_BASE2}/$${OBJECT}
									LINK_TYPE = static
									} 
								FOUND = true
								}
							}
					  
					}
			}
		}
	}
} else {
	IS_LIB = false
	}


# --------------------------- bin type ------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
contains( TYPE, bin ) {
# if we have a binary
# ------  PACKAGE path is user defined  -----------
!isEmpty( PACKAGE_PATH ) {
	exists( $${PACKAGE_PATH}/$${OBJECT} ) {
		FOUND = true
		}
} else {
# ---------------  standard  ----------------------
exists( $${BIN_BASE0}/$${OBJECT} ) {
	FOUND = true
	} else {
		exists( $${BIN_BASE1}/$${OBJECT} ) {
			FOUND = true
			}
		}
}
}


# --------------------------- header type ---------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
contains( TYPE, header ) {
# if we have header
# ------  PACKAGE path is user defined  -----------
!isEmpty( PACKAGE_PATH ) {
	exists( $${PACKAGE_PATH}/$${OBJECT} ) {
		FOUND = true
		}
} else {
# ---------------  standard  ----------------------
exists( $${HEADER_BASE0}/$${OBJECT} ) {
	FOUND = true
	} else {
		exists( $${HEADER_BASE1}/$${OBJECT} ) {
			FOUND = true
			}
		}
}
}


# --------------------------- command type --------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
contains( TYPE, command ) {
# if we have command
system( $${OBJECT} ) {
	FOUND = true
} else {
	ERROR_MESSAGE = "Command "$${OBJECT}" scores an error!"
}
}


# --------------------------- option type ---------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
contains( TYPE, option ) {
# if we have an option
	!contains( PROJECT_ACTIVE_OPTIONS, $${OBJECT} ) {
		DO_ACTIONS = false
		} else {
			FOUND = true
			}
}


# --------------------------- other type ----------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
contains( TYPE, other ) {
# if we have other stuff
# ------  PACKAGE path is user defined  -----------
!isEmpty( PACKAGE_PATH ) {
	exists( $${PACKAGE_PATH}/$${OBJECT} ) {
		FOUND = true
		}
} else {
# ---------------  standard  ----------------------
exists( $${OPTIONAL_BASE0}/$${OBJECT} ) {
	FOUND = true
	} else {
		exists( $${OPTIONAL_BASE1}/$${OBJECT} ) {
			FOUND = true
			} else {
				exists( $${OPTIONAL_BASE2}/$${OBJECT} ) {
					FOUND = true
					}
				}
		}
}
}

# --------------------------- not found but... ----------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# if not found check with user-added paths
# This code is not much sharp... Dirty hack...
isEmpty( PACKAGE_PATH ) {
	contains( FOUND, false) {
			!isEmpty( PATH1 ) {
				exists( $$PATH1/$${OBJECT} ){
				contains( IS_LIB, true) {
					!contains( OPTIONS, skip_link ) {
						LIBS += $$PATH1/$${OBJECT}
						LINK_TYPE = static
						}
				}
				FOUND = true
				}
			}
			!isEmpty( PATH2 ) {
				exists( $$PATH2/$${OBJECT} ){
				contains( IS_LIB, true) {
					!contains( OPTIONS, skip_link ) {
						LIBS += $$PATH2/$${OBJECT}
						LINK_TYPE = static
						}
				}
				FOUND = true
				}
			}
			!isEmpty( PATH3 ) {
				exists( $$PATH3/$${OBJECT} ){
				contains( IS_LIB, true) {
					!contains( OPTIONS, skip_link ) {
						LIBS += $$PATH3/$${OBJECT}
						LINK_TYPE = static
						}
				}
				FOUND = true
				}
			}
			!isEmpty( PATH4 ) {
				exists( $$PATH4/$${OBJECT} ){
				contains( IS_LIB, true) {
					!contains( OPTIONS, skip_link ) {
						LIBS += $$PATH4/$${OBJECT}
						LINK_TYPE = static
						}
				}
				FOUND = true
				}
			}
			!isEmpty( PATH5 ) {
				exists( $$PATH5/$${OBJECT} ){
				contains( IS_LIB, true) {
					!contains( OPTIONS, skip_link ) {
						LIBS += $$PATH5/$${OBJECT}
						LINK_TYPE = static
						}
				}
				FOUND = true
				}
			}
	}
}


# --------------------------- create output message -----------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# We create the right output message for each situation...
contains( FOUND, true) {
	MESSAGE += yes
#	contains( IS_LIB, true) {
		contains( OPTIONS, skip_link ) {
			MESSAGE += $${SKIP_LINK_MESSAGE}
			}
			else {
				contains( LINK_TYPE, static) {
					MESSAGE += $${STATIC_MESSAGE}
					}
				}
		!isEmpty( PACKAGE_PATH ) {
			MESSAGE += $${USER_DEFINED_PATH_MESSAGE}
			}
#		}
	message( $${MESSAGE} )
}


# --------------------------- definitely not found ------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# Not found again? Nothing to do...
contains( FOUND, false) {
	MESSAGE += no
	SUMMARY_MESSAGE = no
	message( $${MESSAGE} )
	!isEmpty( TIP_MESSAGE ) {
		message( "**************************************" )
		message( $${TIP_MESSAGE} )
		message( "**************************************" )
	}
	contains( OPTIONS, exit_on_failure ) {
		message( "**************************************" )
		error( $${ERROR_MESSAGE} )
	}
}
contains( FOUND, static_failure ) {
		message( "**************************************" )
		error( "Failure on static linkage: object not found where expected!" )
	}


# --------------------------- actions -------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# if found:
# Add something
contains( FOUND, true ) {
	contains( DO_ACTIONS , true ) {
		!contains( OPTIONS, skip_link ) {
			!contains( LINK_TYPE , static ) {
				isEmpty( PACKAGE_PATH ) {
					LIBS += $${LINK_LIBS}
					}
				}
			}
		DEFINES += $${ADD_DEFINES}
		SOURCES += $${ADD_SOURCES}
		HEADERS += $${ADD_HEADERS}
		CONFIG += $${ADD_CONFIG}
		!isEmpty( EXECUTE ) {
			system( $${EXECUTE} ) {
				} else {
					message( "Command '$${EXECUTE}' scored an error." )
					}
			}
		SUMMARY_MESSAGE = yes
	} else {
		SUMMARY_MESSAGE = no
	}
}

# --------------------------- summary output ------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
!isEmpty( FEATURE ) {
	contains( OPTIONS, lock_feature ) {
	SUMMARY_MESSAGE += 	(locked)
	}
	contains( PROJECT_SETTINGS , enable_summary ) {
			# if already set into summary file, skip other output
			!system( cat $$SUMMARY_LOG  | grep "$${FEATURE}" -q ) {
				system( echo "	$${FEATURE}	==>	$${SUMMARY_MESSAGE}" >> $$SUMMARY_LOG )
				}
		}
}


# --------------------------- create config.h -----------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# For feature compatibility we do what autoheader does...
contains( FOUND, true) {
	!isEmpty( CONFIG_HEADER_DEFINE ) {
		system( echo " " >> config.h )
		system( echo "$${DEF_CHAR}define	$${CONFIG_HEADER_DEFINE}	1" >> config.h )
		system( echo " " >> config.h )
		}
}


# --------------------------- clean up ------------------------------------
# -------------------------------------------------------------------------
# -------------------------------------------------------------------------
# reset all env fields... (except for OBJECT and TYPE that have
# always to be set!)
# OBJECT =
# TYPE =
# --------------------------------------
DESCRIPTION =
FEATURE =
CONFIG_HEADER_DEFINE =
TIP_MESSAGE =
LINK_LIBS =
EXECUTE =
ADD_DEFINES =
ADD_SOURCES =
ADD_HEADERS =
ADD_CONFIG =
OPTIONS =
PACKAGE =